{
  "openapi": "3.0.1",
  "info": {
    "title": "Questionnaire API",
    "description": "This will be a free to use, open sourced questions database which has a REST API implemented in Python3 & Flask using PostgresSQL database, also this will be a source for a minimal quizzing website which will also let contributors add new questions in multiple categories and as MCQ or T/F types.",
    "contact": {
      "email": "mayank.singh081997@gmail.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "1.0.0"
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "servers": [
    {
      "url": "http://127.0.0.1:5000"
    }
  ],
  "tags": [
    {
      "name": "questions",
      "description": "questions contained within the database"
    },
    {
      "name": "categories",
      "description": "categories used for the different questions"
    },
    {
      "name": "answers",
      "description": "answers available for the different questions in database, can be MCQ or T/F types."
    }
  ],
  "paths": {
    "/api/v1/questions": {
      "get": {
        "tags": [
          "questions"
        ],
        "summary": "Get all Questions from database",
        "operationId": "getQuestions",
        "responses": {
          "200": {
            "description": "request has succeeded",
            "content": {}
          },
          "400": {
            "description": "bad request"
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "post": {
        "tags": [
          "questions"
        ],
        "summary": "create a new question",
        "operationId": "addQuestion",
        "requestBody": {
          "description": "Question object that needs to be added to the database",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Question"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Question"
              }
            }
          },
          "required": true
        },
        "responses": {
          "405": {
            "description": "Invalid input",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/api/v1/questions/{questionId}": {
      "get": {
        "tags": [
          "questions"
        ],
        "summary": "Find question by ID",
        "description": "Returns a single Question",
        "operationId": "getQuestionById",
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "description": "ID of Question to return",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Question"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Question"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Question not found",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "questions"
        ],
        "summary": "Updates a Question in the database with form data",
        "operationId": "updateQuestionWithForm",
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "description": "ID of Question that needs to be updated",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Updated name of the Question"
                  },
                  "status": {
                    "type": "string",
                    "description": "Updated status of the Question"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "405": {
            "description": "Invalid input",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "questions"
        ],
        "summary": "Deletes a Question",
        "operationId": "deleteQuestion",
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "description": "Question id to delete",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Question not found",
            "content": {}
          }
        }
      }
    },
    "/api/v1/answers": {
      "get": {
        "tags": [
          "answers"
        ],
        "summary": "Update an existing Answer",
        "operationId": "updateAnswer",
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Answer not found",
            "content": {}
          },
          "405": {
            "description": "Validation exception",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "post": {
        "tags": [
          "answers"
        ],
        "summary": "Add a new Answer to the Question",
        "operationId": "addAnswer",
        "requestBody": {
          "description": "Answer object that needs to be added to the Question",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Answer"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Answer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "405": {
            "description": "Invalid input",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/api/v1/answers/{answerId}": {
      "put": {
        "tags": [
          "answers"
        ],
        "summary": "Updates a Answer in the Question with form data",
        "operationId": "updateAnswerWithForm",
        "parameters": [
          {
            "name": "answerId",
            "in": "path",
            "description": "ID of Answer that needs to be updated",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Updated name of the Answer"
                  },
                  "status": {
                    "type": "string",
                    "description": "Updated status of the Answer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "405": {
            "description": "Invalid input",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "answers"
        ],
        "summary": "Deletes a Answer",
        "operationId": "deleteAnswer",
        "parameters": [
          {
            "name": "answerId",
            "in": "path",
            "description": "Answer id to delete",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Answer not found",
            "content": {}
          }
        }
      }
    },
    "/api/v1/categories": {
      "get": {
        "tags": [
          "categories"
        ],
        "summary": "Update an existing Category",
        "operationId": "updateCategory",
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Category not found",
            "content": {}
          },
          "405": {
            "description": "Validation exception",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "post": {
        "tags": [
          "categories"
        ],
        "summary": "Add a new Category to the Question",
        "operationId": "addCategory",
        "requestBody": {
          "description": "Category object that needs to be added to the Question",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Category"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Category"
              }
            }
          },
          "required": true
        },
        "responses": {
          "405": {
            "description": "Invalid input",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/api/v1/categories/{categoryId}": {
      "get": {
        "tags": [
          "categories"
        ],
        "summary": "Find Category by ID",
        "description": "Returns a single Category",
        "operationId": "getCategoryById",
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "description": "ID of Category to return",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Category not found",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "categories"
        ],
        "summary": "Updates a Category in the Question with form data",
        "operationId": "updateCategoryWithForm",
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "description": "ID of Category that needs to be updated",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Updated name of the Category"
                  },
                  "status": {
                    "type": "string",
                    "description": "Updated status of the Category"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "405": {
            "description": "Invalid input",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "categories"
        ],
        "summary": "Deletes a Category",
        "operationId": "deleteCategory",
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "categoryId",
            "in": "path",
            "description": "Category id to delete",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Category not found",
            "content": {}
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Question": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "question": {
            "type": "string"
          },
          "category_id": {
            "type": "integer"
          },
          "level": {
            "type": "string"
          },
          "true_false_question": {
            "type": "boolean"
          }
        },
        "xml": {
          "name": "Question"
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        },
        "xml": {
          "name": "Question"
        }
      },
      "Answer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "answer": {
            "type": "string"
          },
          "question_id": {
            "type": "integer"
          },
          "correct_answer": {
            "type": "string"
          }
        },
        "xml": {
          "name": "Answer"
        }
      }
    }
  }
}